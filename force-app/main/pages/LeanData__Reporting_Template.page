<apex:page sideBar="false" standardStylesheets="false" docType="html-5.0" controller="LeanData.Reporting_BaseController">
    <script type="text/javascript">
    Visualforce.remoting.timeout = 120000; // Set timeout at page level
    </script>
    <script>
        if ('{!isGaDisabled}'!='true') {
            (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
                (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
                m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
            })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

            ga('create', 'UA-72099035-1', 'auto');
        }
        
        //ga('send', 'pageview');
        function sendEvent(){
            if ('{!isGaDisabled}'!='true') {
                ga('set', 'dimension1', 'Test Org id');
                ga('send', {
                    hitType: 'event',
                    eventCategory: 'Hi',
                    eventAction: 'Test',
                    eventLabel: 'Test'             
                });
            }
        }
    </script>
    <!-- Bootstrap Core CSS -->
    <apex:stylesheet value="{!URLFOR($Resource.LeanData__bootstrap_v3_3_4, 'css/bootstrap.css')}" />
    <!-- Custom CSS -->
    <apex:stylesheet value="{!URLFOR($Resource.LeanData__bootstrap_v3_3_4, 'css/bootstrap-multiselect.css')}" />
    <link rel="stylesheet" href="//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css" />
    <!-- Fonts -->
    <link href='https://fonts.googleapis.com/css?family=Open+Sans:100,200,300,400,500,600,700' rel='stylesheet' type='text/css' />
    <style>
        <!-- Begin CSS used on Template Only --> 
        .bs {
            line-height: 1;
            font-family: 'Open Sans', sans-serif;
            font-weight: 200;
            font-size: 16px;
            display: table;
            width: 100%;
        }
        
        .bs .loadingParent {
            width: 200px;
            margin-left: auto;
            margin-right: auto;
            margin-top: 150px;
        }
        
        .bs .page-content {
            width: 100%;
            padding: 0px 0px;
            float: left;
        }
        
        .bs .fix-header {
            position: fixed;
            top: 0;
            opacity: 0.9;
            z-index: 9999;
        }
                
        .bs .logo {
            display: block;
            float: left;
            margin-left: 40px;
            margin-top: 15.5px;
        }        
        
        .bs .left-sidebar-button {
            width: 100%;
            color: white;
            height: 37.5px;
            line-height: 37.5px;
            font-size: 13px;
            padding-left: 30px;
            background: #70797b;
            cursor: pointer;
        }
        
        .bs .left-sidebar-button:hover {
            background: #828a8c;
        }
        
        .bs .left-sidebar-subnav {
            color: white;
            font-size: 13px;
            padding-left: 80px;
            padding-bottom: 10px;
            color: #65d2bd;
            margin-top: 5px;
            line-height: 16px;
        }

        .bs .dg_main-button {
            display:block;
            cursor: pointer;
            color: white;
            font-size: 14px;
            font-weight: 200;
            font-family: 'Open Sans';
            width: max-content;
            width: intrinsic;
            width: -moz-max-content;
            padding: 0px 20px;
            line-height: 37.5px;
            border-radius: 3px;
            background: #1b527f;
        }

        .bs .no-hover-underline {
            text-decoration: none !important;
        }
        
        .bs .dg_details-table-pagination {
            float: right;
            margin-top: 20px;
        }
        
        .bs .dg_details-table-pagination-page {
            font-size: 12.5px;
            color: #555555;
            font-weight: 200;
            padding: 5px;
            cursor: pointer;
        }
        
        .bs .dg_details-table-pagination-page-active {
            color: black;
            font-weight: 400;
        }
        
        <!-- End CSS used on Template Only --> <!-- Begin CSS used in all Pages --> <!-- Begin CSS used for Page Structure --> .bs .dg_outer-wrapper {
            background: white;
            border: 1px solid var(--lt-grey-2);
            border-radius: 7.5px;
            float: left;
            margin: 20px;
            width: 1050px;
        }
        
        .bs .dg_outer-wrapper-header {
            width: 100%;
            height: 50px;
            font-size: 19px;
            color: #000000;
            text-align: center;
            line-height: 50px;
            border-bottom: 1px solid #9da8bf;
            display: inline-block;
        }
        
        .bs .dg_outer-wrapper-content {
            padding-top: 20px;
        }
        
        .bs .dg_inner-wrapper-header {
            width: 100%;
            height: 50px;
            font-size: 19px;
            color: #000000;
            text-align: center;
            line-height: 50px;
            border-bottom: 1px solid #9da8bf;
        }
        
        .bs .dg_inner-wrapper-content {
            width: 100%;
            padding: 20px;
        }
        
        .bs .dg_inner-wrapper-content:not(:last-child) {
            border-bottom: 1px solid var(--lt-grey-2);
        }
        
        .bs .dg_inner-wrapper-content:after {
            content: '';
            display: block;
            clear: both;
        }
        
        .bs .dg_floated-item {
            float: left;
            margin-right: 20px
        }
        
        .bs .dg_item-title {
            font-size: 16px;
            color: #555555;
            margin-bottom: 20px;
        }
        
        <!-- End CSS used for Page Structure --> 
        .highcharts-tooltip {
            z-index: 1;
            opacity: 0.9 !important;
        }
        
        
        .dg_inner-wrapper-content h5 {
            font-size: 16px;
            line-height:45px;
        }
        
        .dg_inner-wrapper-content h6 {
            font-size: 12px;
            font-weight: 400;
            line-height:25px;
        }
        
        .dg_inner-wrapper-content p {
            font-size: 12px;
            margin-bottom: 27.5px;
            color: var(--dk-grey-2);
            line-height:20px;
        }
        
        
        .bs .btn {
            font-weight: 200;
        }
        
        .bs a.main-button:hover,
        a.main-button:active,
        a.main-button:visited,
        a.main-button:focus {
            color: white;
            text-decoration: none;
        }
        
        .bs .headerSortUp {
            background: #f0f8ff url("{!URLFOR($Resource.Reporting_Images, 'Up_Arrow_Icon.png')}") no-repeat 99%;
            background-size: 9.5px 5.5px;
        }
        
        .bs .headerSortDown {
            background: #f0f8ff url("{!URLFOR($Resource.Reporting_Images, 'Down_Arrow_Icon.png')}") no-repeat 99%;
            background-size: 9.5px 5.5px;
        }
        
        .bs .dg_bubble-div {
            width: 465px;
            z-index:1;
            background: aliceblue;
            border: 1px #8da8bf solid;
            border-radius: 2px;
            padding: 10px 15px 15px 10px;
            overflow:hidden;
            
        }
        
        .bs .dg_bubble-header {
            font-size: 12px;
            font-weight: 600;
            color: black;
            text-align: center;
            margin-bottom: 5px;
        }
        
        .bs .dg_bubble-left-content {
            display:inline-block;
            width:225px;
            
        }
        
        .bs .dg_bubble-right-content {
            display:inline-block;
            width:160px;
        }
        
        .bs .dg_details-table-div {
            width: 930px;
            margin: 0 auto;
        }
        
        .bs .dg_details-table-innerdiv {
            max-height: 230px;
            height: 230px;
            overflow: auto;
        }
        
        .bs .dg_inner-wrapper-content::-webkit-scrollbar {
            -webkit-appearance: none;
            width: 7px;
        }
        
        .bs .dg_inner-wrapper-content::-webkit-scrollbar-thumb {
            border-radius: 4px;
            background-color: rgba(0, 0, 0, .5);
            -webkit-box-shadow: 0 0 1px rgba(255, 255, 255, .5);
        }
        
        
        .dg_details-table-innerdiv::-webkit-scrollbar {
            -webkit-appearance: none;
            width: 7px;
        }
        
        .dg_details-table-innerdiv::-webkit-scrollbar-thumb {
            border-radius: 4px;
            background-color: rgba(0, 0, 0, .5);
            -webkit-box-shadow: 0 0 1px rgba(255, 255, 255, .5);
        }
        
        .dg_details-table-div table {
            width: 100%;
            border-collapse: collapse;
            font-size: 13px;
        }
        
        .dg_details-table-div th {
            font-weight: 400;
            height: 62.5px;
            vertical-align: middle;
            text-align: left;
            background: #f0f8ff;
            padding: 5px;
        }
        
        .dg_details-table-div th a {
            cursor: pointer !important;
        }
        
        .dg_details-table-div th a:hover {
            text-decoration: none !important;
        }
        
        .dg_details-table-div td {
            vertical-align: middle;
            text-align: left;
            font-family: 'Open Sans', sans-serif;
            padding: 10px 5px;
        }
        
        .bs .dg_large-option-wrapper {
            padding-top: 20px;
            padding-bottom: 20px;
            margin: auto 1.5em;
            display: block;
            width: 500px;
            margin-left: auto;
            margin-right: auto;
        }
        
        .bs .dg_large-option-button {
            display: inline-block;
            text-align: center;
            width: 217.5px;
            height: 47.5px;
            background: #dddddd;
            color: white;
            font-size: 13px;
            line-height: 47.5px;
            border-radius: 2.5px;
            cursor: pointer;
        }
        
        .bs .dg_large-option-button:hover {
            opacity: .5;
            background: url("{!URLFOR($Resource.Reporting_Images, 'Tab_Arrow_Icon.png')}") #1abc9c no-repeat center 40px !important;
            background-size: 9.5px 8px !important;
        }
        
        .bs .dg_large-option-button-active {
            background: url("{!URLFOR($Resource.Reporting_Images, 'Tab_Arrow_Icon.png')}") #1abc9c no-repeat center 40px !important;
            background-size: 9.5px 8px !important;
            cursor: default;
        }
        
        .bs .dg_large-option-button-active:hover {
            background: url("{!URLFOR($Resource.Reporting_Images, 'Tab_Arrow_Icon.png')}") #1abc9c no-repeat center 40px !important;
            background-size: 9.5px 8px !important;
            cursor: default;
            opacity: 1.0 !important;
        }
        
        .dg_axis-choices-div {
            position: absolute;
            margin-left: 270px;
        }
        
        .dg_y-axis-choice {
            z-index: 100;
        }
        
        .dg_x-axis-choice {
            z-index: 100;
        }
        
        .bs .dg_highchart {
            width: 850px;
            height: 530px;
            margin: 35px auto 20px auto;
        }
        
        <!-- End CSS used in all Pages - --> .bs .dg_saveclose-nav {
            margin: 12.5px 20px 37.5px 0;
            clear: both;
            float: right;
        }
        
        .noSidebarCell {
            padding: 0;
        }
        
        .bs .customHeaderContent-right {
            float: right;
            margin: 12.5px 37.5px 0 0;
        }
        
        .bs .customHeaderContent-right-information {
            height: 18px;
            width: 18px;
        }
        
        .bs .customHeaderContent-right-wizard {
            height: 28.5px;
            width: 165px;
            margin-right: 37.5px;
        }
        
        .bs .settingsLink {
            display: block;
            margin-bottom: 5px;
            cursor: pointer;
            width: max-content;
        }
        
        .bs .settingsLinkIcon {
            position: relative;
            top: -2px;
            width: 20px;
            height: 20px;
        }
        
        .bs .settingsLinkLabel {
            margin-left: 5px;
            font-size: 11px;
            color: #5e7178;
            font-weight: 400;
        }
        
        .bs .settingsLinkLabel:hover {
            text-decoration: underline;
        }
        
        .bs .settingsLinkStatus {
            margin-left: 5px;
            display: block;
        }
        
        .bs .selectList {
            border-radius: 0px !important;
            background: white !important;
            padding: 5px 10px !important;
            color: #5e7178 !important;
        }
        
        .bs .settings-nav {
            margin-top: 55px;
        }
        
        .bs .main-button {
            cursor: pointer;
            color: white;
            font-size: 14px;
            padding-left: 10px;
            width: 210px;
            height: 37.5px;
            line-height: 37.5px;
            text-align: left;
            border-radius: 3px;
            background: url("{!URLFOR($Resource.Reporting_Images, 'Line_Arrow_Button.png')}") #1b527f no-repeat right !important;
            background-size: 40px 38px !important;
        }
        
        .bs select {
            border-radius: 0px;
            padding: 5px 8px;
            box-shadow: none;
            -webkit-appearance: menulist;
        }
        
        .bs .dg_picklist,
        .multiselect {
            font-size: 12px !important;
            width: 250px;
            height: 30px !important;
            border-radius: 0px;
        }
        
        .bs .main-button:hover {
            opacity: .5;
        }
        
        .bs .darkBlueBG {
            background: #1b527f;
        }
        
        .bs .yellowBG {
            background: #ffc708;
        }
        
        .bs .blueBG {
            background: #45b7e6;
        }
        
        .bs .open-sans-light {
            font-family: 'Open Sans', sans-serif;
        }
        
        @font-face {
            font-family: open-sans-light;
            src: url("{!URLFOR($Resource.OpenSansLight)}");
        }
        
        .funnelBG {
            background: url("{!URLFOR($Resource.Reporting_Images, 'Funnel_1.png')}") no-repeat;
            background-size: 100%;
        }
        
        <!-- Begin MODAL Styles--> .bs .modal-backdrop {
            position: fixed;
            top: 0;
            right: 0;
            bottom: 0;
            left: 0;
            z-index: 1040;
            background-color: #000;
        }
        
        .bs .modal-backdrop.fade {
            filter: alpha(opacity=0);
            opacity: 0;
        }
        
        .bs .modal-backdrop.in {
            filter: alpha(opacity=50);
            opacity: .5;
        }
        
        .bs .modal-header {
            border-bottom: none;
        }
        
        .bs .close {
            background: none;
            border: none;
            opacity: 1;
            color: #6ab4c9;
            font-size: 32px;
            margin-top: -10px !important;
        }
        
         button:focus {outline:0;}
        
        .bs .close:active {
            border:none;
        }
        
        .bs .lean {
            font-size: 14px !important;
        }
        
        .bs .modal-body h2 { 
            color: #005980;
            font-size: 18px;
            text-align: center;
            font-family: 'Open Sans', sans-serif;
            font-size: 30px;
            font-weight: 200;
            margin-top: -10px;
            margin-bottom: 32px;
        }
        
        .bs .modal-body p {
            text-align: center;
            margin-top: 10px;
            font-size: 16px;
            color: #666666;
            font-family: 'Open Sans', sans-serif;
            line-height: 20px;
            margin-bottom: 28px
        }
        
        .bs .modal-dialog {
            margin: 100px auto;
        }
        
        .bs .modal-backdrop {
            opacity: 0.34 !important;
        }
        
        <!-- End Modal --> .bs .dg_styled-select select {
            background: transparent;
            width: 100%;
            padding: 0px 25px 0px 5px;
            line-height: 14px;
            font-size: 13px;
            border: 0;
            border-radius: 0;
            height: 44px;
            -webkit-appearance: none;
            -moz-appearance: none;
        }
        
        .bs .dg_styled-select {
            width: 280px;
            background: url("{!URLFOR($Resource.Reporting_Images, 'Down_Arrow_Icon.png')}") no-repeat right #fff;
            background-size: 9.5px 5.5px;
            border: 1px solid var(--lt-grey-2);
            background-position: right 10px top 12px;
            line-height: 12px;
        }
        
        .bs .dg_campaign-type-choice-div{
            visibility:hidden;
        }
        
        .bs .dropdown-toggle {
            width: 100%;
            border: none;
            background: transparent;
            text-align: left;
            -webkit-box-shadow: none !important;
            box-shadow: none !important;
        }
        
        .bs .dropdown-toggle:hover {
            background: transparent;
        }
        
        .bs .dropdown-toggle:focus {
            background: transparent;
            -webkit-box-shadow: none !important;
            box-shadow: none !important;
        }
        
        .bs .btn-group {
            width: 100%;
        }
        
        .bs .btn-group > .btn:first-child:active {
            background: transparent;
        }
        
        .bs .dropdown-menu {
            width: 100%;
        }
        
        .dropdown-toggle .caret {
            display: none;
        }
        
        .bs ul li,
        ol li {
            margin-left: 0px;
        }
    </style>
    <div class="bs">
        <apex:form >
            <apex:pageMessages id="pm" />
            <div class="page-content">
                <!-- .header -->
                <div class="header">
                    <div class="logo">
                        <img width="119.5" height="24" src="{!URLFOR($Resource.Reporting_Images, 'LD_logo.png')}" alt="Logo" />
                    </div>
                    <div class="header-title open-sans-light">
                        Clarity
                    </div>
                    <apex:insert name="customHeaderContent" />
                </div>
                <div class="left-sidebar">
                    <a href="/apex/Reporting_Overview" class="no-hover-underline">
                        <div class="home-nav left-sidebar-button">
                            <img class="icon_inactive" width="21.5" height="21.5" src="{!URLFOR($Resource.Reporting_Images, 'Home_Icon.png')}" alt="Home" />
                            <img class="icon_active" style="display:none" width="21.5" height="21.5" src="{!URLFOR($Resource.Reporting_Images, 'Home_Icon_selected.png')}" alt="Home" /> &nbsp; Overview
                        </div>
                    </a>
                    <a href="/apex/Reporting_Bookings" class="no-hover-underline">
                        <div class="bookings-nav left-sidebar-button">
                            <img class="icon_inactive" width="21.5" height="21.5" src="{!URLFOR($Resource.Reporting_Images, 'Bookings_Icon.png')}" alt="Bookings" />
                            <img class="icon_active" style="display:none" width="21.5" height="21.5" src="{!URLFOR($Resource.Reporting_Images, 'Bookings_Icon_Selected.png')}" alt="Bookings" /> &nbsp; Bookings
                        </div>
                    </a>
                    <a href="/apex/Reporting_Pipeline" class="no-hover-underline">
                        <div class="pipeline-nav left-sidebar-button">
                            <img class="icon_inactive" width="21.5" height="21.5" src="{!URLFOR($Resource.Reporting_Images, 'Pipeline_Icon.png')}" alt="Pipeline" />
                            <img class="icon_active" style="display:none" width="21.5" height="21.5" src="{!URLFOR($Resource.Reporting_Images, 'Pipeline_Icon_Selected.png')}" alt="Pipeline" /> &nbsp; Pipeline
                        </div>
                    </a>
                    <a href="/apex/Reporting_TargetAccounts" class="no-hover-underline">
                        <div class="target-account-nav left-sidebar-button">
                            <img class="icon_inactive" width="21.5" height="21.5" src="{!URLFOR($Resource.Reporting_Images, 'Target_Account_Icon.png')}" alt="Target Accounts" />
                            <img class="icon_active" style="display:none" width="21.5" height="21.5" src="{!URLFOR($Resource.Reporting_Images, 'Target_Accounts_Icon_Selected.png')}" alt="Target Accounts" /> &nbsp; Target Accounts
                        </div>
                    </a>
                    <a href="/apex/Reporting_AdvancedSettings" class="no-hover-underline">
                        <div class="settings-nav left-sidebar-button">
                            <img class="icon_inactive" width="21.5" height="21.5" src="{!URLFOR($Resource.Reporting_Images, 'Settings_Icon.png')}" alt="Settings" />
                            <img class="icon_active" style="display:none" width="21.5" height="21.5" src="{!URLFOR($Resource.Reporting_Images, 'Settings_Icon_Selected.png')}" alt="Settings" /> &nbsp; Settings
                        </div>
                    </a>
                </div>
                <apex:outputPanel layout="block" styleClass="main-content">
                    <div class="mainContentAfterLoading" style="display:none">
                        <apex:insert name="mainContent" />
                    </div>
                </apex:outputPanel>
                <!--
                <apex:outputPanel layout="block" styleClass="main-content" rendered="{!!isReporting_On}">
                    Demand Gen module is not enabled. Please contact Leandata to inquire.
                </apex:outputPanel>-->
            </div>
            <!---- End page-container --->
        </apex:form>
        
        <div class="modal fade myModal" id="settingsSavedModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    </div>
                    <div class="modal-body">                       
                        <p>Your settings have been successfully saved.</p>
                        <p class="lean">The LeanData Team</p>
                    </div>
                    <!-- .modal-body -->
                </div>
                <!-- .modal-content -->
            </div>
            <!-- .modal-dialog -->
        </div>
    </div>
    <!-- jQuery Version 1.11.1 -->
    <apex:includeScript value="{!URLFOR($Resource.LeanData__bootstrap_v3_3_4, 'js/jquery.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.LeanData__JqueryUI, 'jquery-ui-1.11.4.custom/jquery-ui.min.js')}" />
    <!-- Bootstrap Core JavaScript -->
    <apex:includeScript value="{!URLFOR($Resource.LeanData__bootstrap_v3_3_4, 'js/bootstrap.js')}" />
    <!-- JavaScript -->
    <apex:includeScript value="{!URLFOR($Resource.LeanData__bootstrap_v3_3_4, 'js/bootstrap-multiselect.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.LeanData__highcharts, 'js/highcharts.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.LeanData__highcharts, 'js/highcharts-more.js')}" />
    <!-- Autonumeric -->
    <apex:includeScript value="{!$Resource.LeanData__autonumeric_min}"/>
    <script src="https://rawgit.com/w3shaman/jquery-lazzynumeric/master/js/jquery.lazzynumeric.js"></script>
    
    <script>
        ns = '{! JSENCODE(nameSpace)}';

        grouping_category = 'By Type';
        campaign_type = '';
        time_frame = '';
        x_axis = '';
        y_axis = '';
        x_axis_label = '';
        y_axis_label = '';
        x_axis_suffix = '';
        y_axis_suffix = '';
        x_axis_prefix = '';
        y_axis_prefix = '';
        x_axis_scale = '';
        y_axis_scale = '';
        x_axis_max = null;
        y_axis_max = null;
        x_axis_min = null;
        y_axis_min = null;
        
        //colorsArray = ['rgb(217, 30, 25)', '#703e94', '#70797b', '#1b527f', '#45b7e6', '#ffc708', '#1abc9c'];
        colorsArray = ['#1b527f'];
        j$ = jQuery.noConflict();

        j$(document).ready(function() {
            j$(".mainContentAfterLoading").css('display','block');
            resizeSideBar();
            sendEvent();
            
        });

        function hideMainHeader() {
            j$(".mainHeader").hide();
        }

        function hideSideBar() {
            j$(".left-sidebar").hide();
        }

        function resizeSideBar() {
            var header = j$(".header");
            var elementOffset = j$('.main-content').offset().top;
            var elementHeight = j$('.main-content').outerHeight(true);
            var headerHeight = header.height();
            var scrollTop = j$(window).scrollTop();

            var dynamicHeight = elementHeight - scrollTop + elementOffset - headerHeight;
            dynamicHeight = dynamicHeight > elementHeight ? elementHeight : dynamicHeight;
            //console.log('Set height: ' + dynamicHeight + ' Header height: ' + headerHeight + ' El height: ' + elementHeight + ' El ofset: ' + elementOffset + ' scrollTop: ' + scrollTop + ' Diff: ' + (elementOffset - scrollTop));

            if (dynamicHeight < 320) {
                dynamicHeight -= 265;
                j$(".left-sidebar").css("top", dynamicHeight);
                j$(".left-sidebar").css("height", "320px");
            } else {
                j$(".left-sidebar").css("top", "55px");
                j$(".left-sidebar").css("height", dynamicHeight);
            }
        }

        function setPageTitle(title) {
            j$(".header-title").text(title);
        }

        function setActiveNav(navClass, subnav) {
            j$('.left-sidebar-button').removeClass('left-sidebar-button-active');
            j$('.' + navClass).find('.icon_active').css('display', '');
            j$('.' + navClass).find('.icon_inactive').css('display', 'none');
            
            if(subnav != undefined) {
                j$('.' + navClass).parent().after("<div class=\"left-sidebar-subnav\">" + subnav + "</div>");
            }
            else {
                j$('.' + navClass).addClass('left-sidebar-button-active');
                j$('.' + navClass).unwrap();
            }
        }

        function setGroupingCategory(val) {
            if (val == 'By Campaign') {
                j$('.dg_large-option-button-campaign').addClass('dg_large-option-button-active');
                j$('.dg_large-option-button-type').removeClass('dg_large-option-button-active');
                j$('.dg_large-option-button-campaign').off('click');
                j$('.dg_large-option-button-type').on('click');
                j$('.dg_campaign-type-choice-div').css('visibility', 'visible');
            } else {
                j$('.dg_large-option-button-campaign').removeClass('dg_large-option-button-active');
                j$('.dg_large-option-button-type').addClass('dg_large-option-button-active');
                j$('.dg_large-option-button-campaign').on('click');
                j$('.dg_large-option-button-type').off('click');
                j$('.dg_campaign-type-choice-div').css('visibility', 'hidden');
            }

            grouping_category = val;
            buildReport();
        }

        var header = j$(".header");
        var headerOffset = header.offset().top;
        j$(document).on("scroll", function(e) {
            // Adjust size of sidebar
            resizeSideBar();

            // Make footer/sidebar sticky
            var wrap = j$(".bs");
            var navBar = j$(".left-sidebar");
            var scrollTop = j$(window).scrollTop();

            header.css('left', -j$(document).scrollLeft() + 10);
            navBar.css('left', -j$(document).scrollLeft() + 10);
            var scrollTopVal = j$(document).scrollTop();
            if (scrollTopVal >= headerOffset) {
                var width = header.width();
                var height = header.height();
                header.css("width", width);
                navBar.css("position", "fixed");
                header.addClass("fix-header");
                wrap.css("margin-top", height);
            } else if (scrollTopVal < headerOffset) {
                header.removeClass("fix-header");
                header.css("width", "100%");
                wrap.css("margin-top", 0);
                navBar.css("position", "");
                navBar.css("top", "");
                navBar.css('left', 0);
            }
        });


        j$(window).resize(function() {
            header.css("width", header.parent().width());
        });


        var objWrapper = function(instanceName, pageName, tableDiv, pageSize, pageNo, sortCategory) {
            this.originalObjList = [];
            this.objList = [];
            this.filteredObjList = [];
            this.instanceName = instanceName;
            this.sortCategory = (sortCategory == undefined ? 'Name' : sortCategory);;
            this.sortOrder = 'ASC';
            this.pageSize = (pageSize == undefined ? 50 : pageSize);
            this.pageNo = pageNo;
            this.searchTerm = '';

            this.tableDiv = tableDiv;
            this.fieldWrapperMap = {};
            this.fieldWrapper = [];
            this.selectAll = false;

            if (pageName == 'Bookings By Campaign') {
                this.sortCategory = 'Lift';
                this.sortOrder = 'DESC';
                this.queryBookingsMetrics();
                this.fieldWrapper = JSON.parse('{!JSENCODE(bookingsFieldsByCampaignJSON)}');
            } else if (pageName == 'Bookings By Type') {
                this.sortCategory = 'Lift';
                this.sortOrder = 'DESC';
                this.queryBookingsMetrics();
                this.fieldWrapper = JSON.parse('{!JSENCODE(bookingsFieldsByTypeJSON)}');
            } else if (pageName == 'Pipeline By Campaign') {
                this.sortCategory = 'FTPipelineAttribution';
                this.sortOrder = 'DESC';
                this.queryPipelineMetrics();
                this.fieldWrapper = JSON.parse('{!JSENCODE(pipelineFieldsByCampaignJSON)}');
            } else if (pageName == 'Pipeline By Type') {
                this.sortCategory = 'FTPipelineAttribution';
                this.sortOrder = 'DESC';
                this.queryPipelineMetrics();
                this.fieldWrapper = JSON.parse('{!JSENCODE(pipelineFieldsByTypeJSON)}');
            } else if (pageName == 'Target Accounts By Campaign') {
                this.sortCategory = 'FTPipelineAttribution';
                this.sortOrder = 'DESC';
                this.queryTargetAccountsCampaignMetrics();
                this.fieldWrapper = JSON.parse('{!JSENCODE(targetAccountFieldsByCampaignJSON)}');
            } else if (pageName == 'Target Accounts By Type') {
                this.sortCategory = 'FTPipelineAttribution';
                this.sortOrder = 'DESC';
                this.queryTargetAccountsCampaignMetrics();
                this.fieldWrapper = JSON.parse('{!JSENCODE(targetAccountFieldsByTypeJSON)}');
            } else if (pageName == 'Accounts with Recent Activity') {
                this.sortCategory = 'Reporting_Last_Marketing_Touch_Date__c';
                this.sortOrder = 'DESC';
                this.queryAccountsWithRecentActivity();
                this.fieldWrapper = JSON.parse('{!JSENCODE(accountsWithRecentActivityFieldsJSON)}');
            } else if (pageName == 'Opportunity Stages') {
                this.queryOpportunityMetrics();
                //this.fieldWrapper = JSON.parse('{!bookingsFieldsJSON}');
            } else if (pageName == 'Segment Opportunity') {
                this.querySegmentMetrics();
                this.fieldWrapper = JSON.parse('{!JSENCODE(segmentOpportunityFieldsJSON)}');
            } else if (pageName == 'Segment Account') {
                this.querySegmentMetrics();
                this.fieldWrapper = JSON.parse('{!JSENCODE(segmentAccountFieldsJSON)}');
            }

            for (var i = 0; i < this.fieldWrapper.length; i++) {
                if(this.fieldWrapper[i].fieldName.includes('__c')) {
                    this.fieldWrapper[i].fieldName = ns + this.fieldWrapper[i].fieldName;
                }
                  
                this.fieldWrapperMap[this.fieldWrapper[i].fieldName] = this.fieldWrapper[i];
            }
        };

        objWrapper.prototype.renderReports = function() {
            //console.log( this.objList );        
            this.drawChart();
            this.renderTable();
            this.sortTable();
        }

        objWrapper.prototype.setChartUnits = function() {
            var campaign_type = j$('.dg_campaign-type-choice').val();
            if( campaign_type == null )
                campaign_type = [];
            campaign_type.push('');
            //console.log( ' grouping category ' + grouping_category );
            //console.log( ' Campaign Type Selections' + campaign_type );
            //console.log( 'Reset objList ' );
            
            this.objList = [];
            x_axis_max = 0;
            y_axis_max = 0;
            x_axis_min = 0;
            y_axis_min = 0;
            
            x_axis = j$('.dg_x-axis-choice').val();
            x_axis_label = j$('.dg_x-axis-choice :selected').text();
            y_axis = j$('.dg_y-axis-choice').val();
            y_axis_label = j$('.dg_y-axis-choice :selected').text();
            x_axis_scale = '';
            y_axis_scale = '';

            if (this.fieldWrapperMap[x_axis].fieldType == 'Currency') {
                x_axis_prefix = '$';
                x_axis_suffix = '';
            } else if (this.fieldWrapperMap[x_axis].fieldType == 'Integer' || this.fieldWrapperMap[x_axis].fieldType == 'Double') {
                x_axis_prefix = '';
                x_axis_suffix = '';
            } else if (this.fieldWrapperMap[x_axis].fieldType == 'Percentage') {
                x_axis_prefix = '';
                x_axis_suffix = '%';
            } else{
                x_axis_prefix = '';
                x_axis_suffix = '';
            }

            if (this.fieldWrapperMap[y_axis].fieldType == 'Currency') {
                y_axis_prefix = '$';
                y_axis_suffix = '';
            } else if (this.fieldWrapperMap[y_axis].fieldType == 'Integer' || this.fieldWrapperMap[y_axis].fieldType == 'Double') {
                y_axis_prefix = '';
                y_axis_suffix = '';
            } else if (this.fieldWrapperMap[y_axis].fieldType == 'Percentage') {
                y_axis_prefix = '';
                y_axis_suffix = '%';
            } else{
                y_axis_prefix = '';
                y_axis_suffix = '';
            }

            //console.log('Template Method: set x axis ' + x_axis);
            //console.log('Template Method: set y axis ' + y_axis);
            //console.log('Field Wrapper : ');
            //console.log(this.fieldWrapperMap);
            if (isNumericField(x_axis, this.fieldWrapperMap)) {
                var x_divisor = getDivisor(Math.max.apply(null, getArrayVals(this.originalObjList, x_axis)));
                x_axis_scale = getDivisorChar(Math.max.apply(null, getArrayVals(this.originalObjList, x_axis)));
            }
            if (isNumericField(y_axis, this.fieldWrapperMap)) {
                var y_divisor = getDivisor(Math.max.apply(null, getArrayVals(this.originalObjList, y_axis)));
                y_axis_scale = getDivisorChar(Math.max.apply(null, getArrayVals(this.originalObjList, y_axis)));
            }

            for (var i = 0; i < this.originalObjList.length; i++) {
                if (isNumericField(x_axis, this.fieldWrapperMap)) {
                    this.originalObjList[i].x = roundToTwo( this.originalObjList[i][x_axis] / x_divisor );
                } else {
                    this.originalObjList[i].x = this.originalObjList[i][x_axis];
                }
                if (isNumericField(y_axis, this.fieldWrapperMap)) {
                    this.originalObjList[i].y = roundToTwo( this.originalObjList[i][y_axis] / y_divisor );
                } else {
                    this.originalObjList[i].y = this.originalObjList[i][y_axis];
                }

                //var tempColor = colorsArray[i%7];
                var tempColor = '#1abc9c';
                if( x_axis_max == null || x_axis_max < this.originalObjList[i].x ){
                    x_axis_max = this.originalObjList[i].x;
                }
                
                if( x_axis_min == null || x_axis_min > this.originalObjList[i].x ){
                    x_axis_min = this.originalObjList[i].x;
                }
                
                if( y_axis_max == null || y_axis_max < this.originalObjList[i].y ){
                    y_axis_max = this.originalObjList[i].y;
                }
                
                if( y_axis_min == null || y_axis_min > this.originalObjList[i].y){
                    y_axis_min = this.originalObjList[i].y;
                }

                if( grouping_category == 'By Type' || ( grouping_category == 'By Campaign' && j$.inArray(this.originalObjList[i].Type, campaign_type) > -1 ) )  {  
                    this.originalObjList[i].fillColor = tempColor;
                    this.originalObjList[i].color = tempColor;                       
                    this.objList.push( this.originalObjList[i] );
                    
                }
            }
            x_axis_max = x_axis_max + Math.abs( x_axis_max )*.2;
            y_axis_max = y_axis_max + Math.abs( y_axis_max )*.1;
            x_axis_min = x_axis_min - Math.abs( x_axis_min )*.1;
            y_axis_min = y_axis_min - Math.abs( y_axis_min )*.1;
        }

        objWrapper.prototype.selectAllFilteredObj = function() {
            this.selectAll = !this.selectAll;
            for (var i = 0; i < this.filteredObjList.length; i++) {
                this.filteredObjList[i].isSelected = this.selectAll;
            }

            if(!this.selectAll) {
                j$('.table-settings-selectAllLabel').text('Select All');
            }
            else {
                j$('.table-settings-selectAllLabel').text('Unselect All');
            }

            this.renderTable();
        }


        objWrapper.prototype.renderTable = function() {
            //console.log ( 'rednder table list' );
            //console.log( this.objList );
            //console.log( this.fieldWrapper );
            var tableInMaking = '<table>';
            var colWidths = '';
            for (var i = 0; i < this.fieldWrapper.length; i++) {
                colWidths += '<col width="' + 100 / this.fieldWrapper.length + '%">';
            }

            tableInMaking += colWidths + '<tr>';
            for (var i = 0; i < this.fieldWrapper.length; i++) {
                var sortingArrow = '';
                if (this.sortCategory == this.fieldWrapper[i].fieldName && this.sortOrder == 'ASC') {
                    sortingArrow = '<img alt="Sort" height="5.5px" width="9.5px" style="margin-left:10px" src="{!URLFOR($Resource.Reporting_Images, 'Up_Arrow_Icon.png')}"/>';
                } else if (this.sortCategory == this.fieldWrapper[i].fieldName && this.sortOrder == 'DESC') {
                    sortingArrow = '<img alt="Sort" height="5.5px" width="9.5px" style="margin-left:10px" src="{!URLFOR($Resource.Reporting_Images, 'Down_Arrow_Icon.png')}"/>';
                }
                tableInMaking += '<th><span style="cursor:pointer" onClick="' + this.instanceName + '.sortTable(\'' + this.fieldWrapper[i].fieldName + '\');">' + this.fieldWrapper[i].fieldLabel + sortingArrow + '</span></th>';

            }

            tableInMaking += '</tr></table><div class="dg_details-table-innerdiv"><table>' + colWidths;

            this.filteredObjList = [];

            for (var i = 0; i < this.objList.length; i++) {
                if (this.objList[i]['Name'].toLowerCase().indexOf(this.searchTerm.toLowerCase()) >= 0) {
                    this.filteredObjList.push(this.objList[i]);
                }
            }


            var indexStart = 0;
            if (this.pageNo > 0) {
                indexStart = (this.pageNo - 1) * this.pageSize;
            }

            for (var i = indexStart; i < (indexStart + this.pageSize) && i < this.filteredObjList.length; i++) {
                tableInMaking += '<tr>';

                for (var z = 0; z < this.fieldWrapper.length; z++) {
                    tableInMaking += '<td>' + this.formatFieldByType(i, z) + '</td>';
                }
                tableInMaking += '</tr>';
            }

            tableInMaking += '</table></div>';

            var pagination = '';
            var noPages = Math.ceil(this.filteredObjList.length / this.pageSize);
            if (this.pageNo > 0 && noPages > 1) {
                
                var showingFrom = ((this.pageNo-1) * this.pageSize) + 1;
                var showingTo = Math.min(this.pageNo * this.pageSize, this.filteredObjList.length);

                pagination = '<div class="dg_details-table-pagination">';
                pagination += '<span class="dg_details-table-pagination-page">Showing ' + '<span style="display:inline-block;width:20px;text-align:center">' + showingFrom + '</span> to ' + '<span style="display:inline-block;width:20px;text-align:center">' + showingTo + '</span>  of ' + '<span style="display:inline-block;width:60px;text-align:center">' + this.objList.length + ' entries</span></span>';

                pagination += '<div style="display:inline-block;width:130px"><span style="float:right"><span onclick="' + this.instanceName + '.pageNo = 1;' + this.instanceName + '.renderTable();" class="dg_details-table-pagination-page">' +
                    '<img width="8" height="7.5" src="{!URLFOR($Resource.Reporting_Images, 'Double_Scroll_Left_Arrow.png')}" alt="Move Left To End" /></span>';

                pagination += '<span onclick="' + this.instanceName + '.pageNo = ' + (this.pageNo == 1 ? 1 : this.pageNo - 1) + ';' + this.instanceName + '.renderTable();" class="dg_details-table-pagination-page"> ' +
                    '<img width="4" height="7.5" src="{!URLFOR($Resource.Reporting_Images, 'Scroll_Left_Icon.png')}" alt="Move Left" /></span>';


                var startPage = this.pageNo - 1 > 0 ? this.pageNo - 1 : 1;
                if (this.pageNo == noPages && this.pageNo - 2 > 0) {
                    startPage = this.pageNo - 2;
                }

                for (var i = startPage; i <= noPages && i < startPage + 3; i++) {
                    pagination += '<span onclick="' + this.instanceName + '.pageNo = ' + i + ';' + this.instanceName + '.renderTable();" class="dg_details-table-pagination-page';

                    if (i == this.pageNo) {
                        pagination += ' dg_details-table-pagination-page-active';
                    }

                    pagination += '">' + i + '</span>';
                }


                pagination += '<span onclick="' + this.instanceName + '.pageNo = ' + (this.pageNo == noPages ? noPages : this.pageNo + 1) + ';' + this.instanceName + '.renderTable();" class="dg_details-table-pagination-page">' +
                    '<img width="4" height="7.5" src="{!URLFOR($Resource.Reporting_Images, 'Scroll_Right_Icon.png')}" alt="Move Right" /></span>';

                pagination += '<span onclick="' + this.instanceName + '.pageNo = ' + noPages + ';' + this.instanceName + '.renderTable();" class="dg_details-table-pagination-page">' +
                    '<img width="8" height="7.5" src="{!URLFOR($Resource.Reporting_Images, 'Double_Scroll_Right_Arrow.png')}" alt="Move Right To End" /></span>';

                pagination += '</span></div></div>';
            }

            this.tableDiv.html(tableInMaking + pagination);
            resizeSideBar();
        }

        objWrapper.prototype.sortTable = function(fieldLabel, order) {
            if(order != undefined) {
                this.sortCategory = fieldLabel;
                this.sortOrder = order;
            }
            else if (fieldLabel != undefined) {
                if(this.sortCategory == fieldLabel) {
                    if( this.sortOrder == 'ASC' )
                            this.sortOrder = 'DESC';
                        else
                            this.sortOrder = 'ASC';
                }
                else {
                    this.sortCategory = fieldLabel;
                    this.sortOrder = 'ASC';
                }
            }
                
            sortCategory = this.sortCategory;
            sortOrder = this.sortOrder;
            

            //console.log( 'Sort By ' + sortCategory + '  ' + sortOrder);

            this.objList.sort(function(a, b) {
                var x = a[sortCategory];
                var y = b[sortCategory];

                if (sortOrder == 'ASC')
                    return ((x < y) ? -1 : ((x > y) ? 1 : 0));
                else if (sortOrder == 'DESC')
                    return ((x < y) ? 1 : ((x > y) ? -1 : 0));
            });

            if(this.pageNo > 1) {
                this.pageNo = 1;
            }
            
            this.renderTable();
        }


        // HELPER METHODS
        function formatFieldByType(val, displayType) {
            if (val == undefined || val == 'undefined')
                return '';

            if (displayType == 'String') {
                return val;
            } else if (displayType == 'Currency') {
                //console.log( ' Original Currency ' + val );
                return (val < 0 ? '-' : '') + '$' + scaleField(Math.abs(val));
            } else if (displayType == 'Integer') {
                return val;
            } else if (displayType == 'Decimal' || displayType == 'Double') {
                return scaleField(val);
            } else if (displayType == 'Percentage') {
                return scaleField(val) + '%';
            }
        }

        function getArrayVals(objArray, key) {
            return objArray.map(function(obj) {
                return obj[key];
            });
        }

        function getNumericalArrayVals(objArray, key, divisor) {
            return objArray.map(function(obj) {
                return Math.round((obj[key] / divisor)*Math.pow(10,2))/Math.pow(10,2);
            });
        }

        function getFieldByString(o, s) {
            s = s.replace(/__r/g, '__c');
            s = s.replace(/\[(\w+)\]/g, '.$1'); // convert indexes to properties
            s = s.replace(/^\./, ''); // strip a leading dot
            var a = s.split('.');
            for (var i = 0, n = a.length; i < n; ++i) {
                var k = a[i];
                if (k in o) {
                    o = o[k];
                } else {
                    return;
                }
            }
            return o;
        }

        Array.prototype.sum = function(prop) {
                var total = 0;
                for (var i = 0, _len = this.length; i < _len; i++) {
                    total += this[i][prop];
                }
                return total;
            }
            
        function roundToTwo(num) {    
            return +(Math.round(num + "e+2")  + "e-2");
        }
            //----------------- Formatting Methods

        function isNumericField(val, displayFieldsMap) {
            if (displayFieldsMap[val].fieldType == 'Currency' || displayFieldsMap[val].fieldType == 'Integer' || displayFieldsMap[val].fieldType == 'Double' || displayFieldsMap[val].fieldType == 'Percentage') {
                return true;
            } else
                return false;
        }

        function getDivisor(val) {
            if (Math.abs(val / 1000000000) >= 0.99) {
                return 1000000000;
            } else if (Math.abs(val / 1000000) >= 0.99) {
                return 1000000;
            } else if (Math.abs(val / 1000) > 0.99) {
                return 1000;
            } else {
                return 1;
            }
        }

        function getDivisorChar(val) {
            if (Math.abs(val / 1000000000) >= 0.99) {
                return 'B';
            } else if (Math.abs(val / 1000000) >= 0.99) {
                return 'M';
            } else if (Math.abs(val / 1000) > 0.99) {
                return 'K';
            } else {
                return '';
            }
        }
        
        function getDivisorWord(val) {
            if (val == 1000000000) {
                return 'Billions';
            } else if ( val == 1000000) {
                return 'Millions';
            } else if ( val == 1000) {
                return 'Thousands';
            } else {
                return '';
            }
        }
        
        function formatField(val, displayType) {
            if (val == undefined || val == 'undefined')
                return '';
            if (displayType == 'String') {
                return val;
            } else if (displayType == 'Currency' || displayType == 'Integer' || displayType == 'Percentage' || displayType == 'Double') {
                return scaleField(val);
            }
        }

        function formatFieldForDisplay(val, displayFieldsMap, fieldName) {
            if (val == undefined || val == 'undefined')
                return '';

            var displayType = displayFieldsMap[fieldName].fieldType;
            if (displayType == 'String') {
                return val;
            }
            if (displayType == 'Currency') {
                return (val < 0 ? '-' : '') + '$' + scaleField(Math.abs(val));
            } else if (displayType == 'Integer') {
                return val;
            } else if (displayType == 'Decimal' || displayType == 'Double') {
                return scaleField(val);
            } else if (displayType == 'Percentage') {
                return scaleField(val) + '%';
            }
        }

        objWrapper.prototype.formatFieldByType = function(objectIndex, fieldIndex) {
            fieldName = this.fieldWrapper[fieldIndex].fieldName;
            fieldType = this.fieldWrapper[fieldIndex].fieldType;
            fieldLabel = this.fieldWrapper[fieldIndex].fieldLabel;
            
            var propertyChain = fieldName.split(".");
            itemValue = this.filteredObjList[objectIndex][propertyChain[0]];
            if(typeof itemValue === 'object') {
                if(fieldName.includes('Name') || fieldName.includes('Owner')) { 
                    var displayedString = '';
                    for (var property in itemValue) {
                        if (itemValue.hasOwnProperty(property) && (property == 'Name' || property == 'FirstName' || property == 'LastName')) {
                            displayedString += itemValue[property] + ' ';
                        }
                    }
                    if(displayedString != '') {
                        return '<a target="_blank" href="/' + itemValue.Id + '">' + displayedString+ '</a>';
                    }
                }
                else {
                    for(var i=1;i<propertyChain.length;i++) {
                        itemValue = itemValue[propertyChain[i]];    
                    }
                    
                    return itemValue;
                }
            }

            if (itemValue == undefined || itemValue == 'undefined')
                return '';
                
            if(fieldLabel == 'Campaign Name' || fieldLabel == 'Account Name' || fieldLabel == 'Opp Name') {
                return '<a target="_blank" href="/' + this.filteredObjList[objectIndex].Id + '">' + this.filteredObjList[objectIndex].Name + '</a>';
            }

            if (fieldType == 'String') {
                return itemValue;
            } else if (fieldType == 'Currency') {
                return (itemValue < 0 ? '-' : '') + '$' + scaleField(Math.abs(itemValue));
            } else if (fieldType == 'Integer') {
                return itemValue;
            } else if (fieldType == 'Decimal' || fieldType == 'Double') {
                return scaleField(itemValue);
            } else if (fieldType == 'Percentage') {
                return scaleField(itemValue) + '%';
            } else if (fieldType == 'Checkbox') {

                var checkboxDiv = '<div style="cursor:pointer;width:24px;margin-left: 20px;" onClick="' + this.instanceName + '.filteredObjList[' + objectIndex + '][\'' + fieldName + '\'] = ' + !itemValue + ';' + this.instanceName + '.renderTable();">';
                checkboxDiv += '<img ' + (!itemValue ? 'style="display:none"' : '') + 'src="{!URLFOR($Resource.Reporting_Images, 'Checkmark_Selected_Icons.png')}" width="24" height="24"/>';
                checkboxDiv += '<img ' + (itemValue ? 'style="display:none"' : '') + 'src="{!URLFOR($Resource.Reporting_Images, 'Checkmark_Unselected_Icon.png')}" width="24" height="24"/>';
                checkboxDiv += '</div>';

                return checkboxDiv;
            } else if (fieldType == 'Date' && itemValue != '') {
                var myDate = new Date(itemValue);
                return (myDate.getMonth() + 1) + "/" + myDate.getDate() + "/" + myDate.getFullYear()
            }
            
            return itemValue;
        }

        function scaleField(number) {
            //console.log( ' Sytart Scale ' + number );
            number = number * 1.0;

            if (Math.abs(number / 1000000000) >= 0.99) {

                number = number / 1000000000;
                number = number.toFixed(2);
                number += 'B';
            } else if (Math.abs(number / 1000000) >= 0.99) {
                number = number / 1000000;
                number = number.toFixed(2);
                number += 'M';
            } else if (Math.abs(number / 1000) >= 0.99) {
                number = number / 1000;
                number = number.toFixed(2);
                number += 'K';
            } else {
                number = number.toFixed(2);
            }

            //console.log(' End Scale ' + number );
            return number;
        }
              
        function getAvg(arr) {
            if (arr.length == 0)
                return 0;
            return arr.reduce(function(p, c) {
                return p + c;
            }) / arr.length;
        }
        
        function openWindow(url) {
            newWin=window.open(url, 'Popup');
            if (window.focus) {
                newWin.focus();
            }    
        }
        
        function closeSubpage() {
            if (null!=newWin) {
               newWin.close();
            }  
        }
        
        function CloseWindow() {
            var winMain=window.opener;
            if (null==winMain) {
                winMain=window.parent.opener;
            }
            winMain.closeSubpage();
            
            return false;
        }
        
        j$('#settingsSavedModal').on('hidden.bs.modal', function (e) {
            CloseWindow();
        });
    </script>
</apex:page>