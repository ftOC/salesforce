<apex:page sideBar="false" showHeader="false" standardStylesheets="false" docType="html-5.0" standardcontroller="Opportunity" extensions="LeanData.Reporting_OpportunityViewController">
    <!-- Bootstrap Core CSS -->
    <apex:stylesheet value="{!URLFOR($Resource.LeanData__bootstrap_v3_3_4, 'css/bootstrap.css')}" />
    <!-- Custom CSS -->
    <apex:stylesheet value="{!URLFOR($Resource.LeanData__bootstrap_v3_3_4, 'css/bootstrap-multiselect.css')}" />
    <link rel="stylesheet" href="//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css" />
    <apex:stylesheet value="{!URLFOR($Resource.LeanData__magellan_app, 'css/magellan.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.LeanData__magellan_app, 'scss/magellan.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.LeanData__angela_app, 'styles.css')}"/> 
    <!-- Fonts -->
    <link href='https://fonts.googleapis.com/css?family=Open+Sans:100,200,300,400,500,600,700' rel='stylesheet' type='text/css' />
    <apex:stylesheet value="{!URLFOR($Resource.LeanData__DataTables, 'DataTables/2.0.2-responsive.dataTables.min.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.LeanData__DataTables, 'DataTables/1.10.4-jquery.dataTables.css')}"/>
    
    <style>    
        body{
            margin: 0;
        }
        
        .bs .open-sans-light {
            font-family: 'Open Sans', sans-serif;
        }
        
        .bs .semi-bold{
            font-weight: 600;
        }
        @font-face {
            font-family: open-sans-light;
            src: url("{!URLFOR($Resource.OpenSansLight)}");
        }
        
        .bs {
            line-height: 1;
            font-family: 'Open Sans', sans-serif;
            font-weight: 200;
            font-size: 16px;
            display: table;
            width: 100%;
            min-width: 1000px;
        }
        
        .bs .header-title {
            font-size: 12pt;
            font-family: 'Open Sans';
            line-height: 50px;
            margin-left: 67.5px;
            float:left;
            color: #555555;
        }
        
        .bs .header-metrics {
            font-size: 8pt;
            float: right;
            margin-right: 7.5px;
            font-family: 'Open Sans';
        }
        
        .bs .header-metrics div{
            float: right;
            margin-left: 35px;
            line-height: 50px;
        }
        .bs .logo {
            display: block;
            float:left;
            margin-left: 12.5px;
            margin-top: 13px;
        }

        .bs .inner-wrapper {
            width: 100%;
            background: white;
            border: 1px solid var(--lt-grey-2);
            border-radius: 7.5px;         
        }
        
        .bs .legend-div{
            float:left;
            margin-top: 12.5px;
            margin-left: 12.5px;
            cursor: pointer;
        }
        
        .bs .legend-div:hover{
            opacity: .5;
        }
        
        .bs .clarity-link-div{
            float:right;
            margin-top: 12.5px;
            margin-right: 12.5px;
            font-size: 10pt;
            color: #1b527f;
        }
        
        .bs .timeline{    
            margin: 100px auto;
            width:950px;       
        }
        
        .bs .detail-table-div{    
            min-width: 850px;
            height: 322px;
            margin-top: 30px;
            display:none;
            text-align:center;
            padding: 50px;
            padding-top: 10px;
        }
        
        .bs .timeline-section{
            float: left;
        }

        .bs .timeline-start{
            width:35px;
            font-weight:400;
            margin-right:40px;
            font-size:9pt;
            color:#1b527f;
            display:none;
        }
        
        .bs .second-half-timeline{
            left: -290px !important;
        }
        
        .bs .top-section{
            height: 70px;
            overflow: visible;
            position: relative;
        }
        
        .bs .mid-section{
            background: var(--ld-lt-green-2);
            height: 14px;
            position: relative;
            cursor:pointer;
        }
        
        
        .bs .bottom-section{
            vertical-align: top;
            height: 70px;
            overflow: visible;
            position: relative;
        }

        #invalidNotice {
            height:186px;
            display:none;
            text-align:center;
            color:#1b527f;
        }
        
        .bs .toggle-mode-div{
            margin: 0 auto;           
            text-align: center;
            margin-bottom: 12.5px;
            background:var(--lt-grey-2);
            border-radius:7.5px;
            width: 92px;
            height:20px;
            padding:3px;
            display:none;
            clear:both;
        }
        
        .bs .mode-div:hover{
            background: #f0f8ff !important; 
            text-decoration: none !important;
            color: #1b527f !important;
        }
        
        .bs .marketing-pointer{
            margin-left:5px;
            position: absolute;
            bottom: 0;
        }
        
        .bs .flip-vertical {
            -moz-transform: scaleY(-1);
            -webkit-transform: scaleY(-1);
            transform: scaleY(-1);
            filter: flipv; /*IE*/
        }
        
        .bs .marketing-info{
            font-family: 'Open Sans', sans-serif;
            font-size: 8pt;
            color: var(--dk-grey-2);
            position: absolute;
            bottom: 40px;
            left: 5px;
            -webkit-transform: rotate(-45deg); 
            -moz-transform: rotate(-45deg);  
            filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=-5); /*for IE*/
        }
        
        .bs .special-event-marketing-info{
            /*bottom: 20px;
            left: 15px;*/
        }
        
        .bs .sales-pointer{
            margin-left:5px;
            position: absolute;
            top: 0;
        }
        
        .bs .flip-vertical {
            -moz-transform: scaleY(-1);
            -webkit-transform: scaleY(-1);
            transform: scaleY(-1);
            filter: flipv; /*IE*/
        }
        
        .bs .sales-info{
            font-family: 'Open Sans', sans-serif;
            font-size: 8pt;
            color: var(--dk-grey-2);
            top: 95px;
            right: 23-30px;
            position: absolute;
            -webkit-transform: rotate(-45deg); 
            -moz-transform: rotate(-45deg);  
            filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=-5); /*for IE*/
        }
        
        .bs .stage-change-section{
            border-right: 1px solid white;
            border-left: 1px solid white;
            background: #fcd79c !important;
        }
        span.clear { clear: left; display: block; }
        
        th{
            background: #f0f8ff !important;
        }
        <!-- modal -->
        .bs .modal {
            z-index: 1150;
        }

        .bs .modal-backdrop {
            position: fixed;
            top: 0;
            right: 0;
            bottom: 0;
            left: 0;
            z-index: 1040;
            background-color: #000;
        }
        
        .bs .modal-backdrop.fade {
            filter: alpha(opacity=0);
            opacity: 0;
        }
        
        .bs .modal-backdrop.in {
            filter: alpha(opacity=50);
            opacity: .5;
        }
        
        .bs .modal-header {
            border-bottom: none;
        }
        
        .bs .close {
            background: none;
            border: none;
            opacity: 1;
            color: #6ab4c9;
            font-size: 32px;
            margin-top: -10px !important;
        }
        
         button:focus {outline:0;}
        
        .bs .close:active {
            border:none;
        }
        
        .bs .lean {
            font-size: 14px !important;
        }
        
        .bs .modal-body h2 { 
            color: #005980;
            font-size: 18px;
            text-align: center;
            font-family: 'Open Sans', sans-serif;
            font-size: 30px;
            font-weight: 200;
            margin-top: -10px;
            margin-bottom: 32px;
        }
        
        .bs .modal-body p {
            text-align: center;
            margin-top: 10px;
            font-size: 16px;
            color: #666666;
            font-family: 'Open Sans', sans-serif;
            line-height: 20px;
            margin-bottom: 28px
        }
        
        .bs .modal-dialog {
            margin: 100px auto;
        }
        
        .bs .modal-backdrop {
            opacity: 0.34 !important;
        }
        
        .bs .dg_inner-wrapper {
            background: white;
            border: 1.5px solid #8da8bf;
            border-radius: 7.5px;
            margin: 20px 20px 20px 20px;
            float: left;
        }
        
        .bs .dg_inner-wrapper:after {
            content: '';
            display: block;
            clear: both;
        }
        
        .bs .dg_inner-wrapper-header {
            width: 100%;
            height: 30px;
            font-size: 15px;
            color: #000000;
            text-align: center;
            line-height: 30px;
            border-bottom: 1px solid #9da8bf;
        }
        
        .bs .dg_inner-wrapper-content {
            width: 100%;
            padding: 15px;
        }
        
        .bs .dg_inner-wrapper-content:not(:last-child) {
            border-bottom: 1px solid var(--lt-grey-2);
        }
        
        .bs .dg_inner-wrapper-content:after {
            content: '';
            display: block;
            clear: both;
        }
        <!-- End Modal -->
        
        .bs .detail-table{
            width:100%;
        }

        .detail-table-div .detail-table th.sorting_asc,
        .detail-table-div .detail-table th.sorting_desc,
        .detail-table-div .detail-table th.sorting {
            background: var(--lt-grey-2) !important;
            border-bottom: var(--lt-grey-2);
        }

        .detail-table-div .detail-table td {
            border-bottom: 1px solid var(--lt-grey-2);
        }
        
        .bs th{
            font-size: 10px;
        }
        
        .bs .dataCell{
            font-size: 10px;
            border-bottom: 1px solid #dddddd;
            padding: 6px 10px !important;
            text-align:left;
        }
        
        .bs .dataCell div {
            line-height: 14px;
        }
        
        .bs .detail-column{
            border-bottom: 1px solid #dddddd;
        }
        
        .bs .section-tool-tip { display:none; }
        .bs .selected-tool-tip-icon{ display:none;}
        /*.bs .mid-section:hover{ background:#54cdb5 !important; }*/
        .bs .mid-section:hover .selected-tool-tip-icon { display:block; }
        .bs .mid-section:hover .section-tool-tip { display:block; }
        .bs .hidden-tool-tip-icon{ display: none !important; }
        
        .bs .tool-tip-header{
            font-size: 9pt;
        }
        .bs .active-toggle{
            color:white !important;
            background: var(--ld-lt-green-2) !important;
        }
        .bs .view-toggle{
            color:#555;
            cursor:pointer;
            text-align:center;
            line-height:14px;
            font-size:6pt;
            font-weight:400;
            float:left;
            width:40px;
            height:14px;
            border-radius:5px;
        }
        
        .bs .first-touch-shift{
            margin-left:16px;
        }
        .timeline-wrapper {
            overflow: scroll;
            height: 350px;
        }
    </style>
    <div class="bs">
        <div>
            <div>
                <div class="logo">
                    <img width="119.5" height="24" alt="Logo" src="{!URLFOR($Resource.DashboardImages,'LD-logo_2x.png')}"/>
                </div>
                <div class="header-title open-sans-light">
                    Buyer's Journey | Touch Timeline
                </div>
                
                <div class="header-metrics">
                </div>
            </div>
            <apex:outputPanel layout="block">
                <div class="inner-wrapper timeline-wrapper">
                    <a class="legend-div" data-toggle="modal" data-target="#infoModal">
                        <img style="width:18px;height:18px;" src="{!URLFOR($Resource.Reporting_Images, 'Info_Button_Icon.png')}"/>
                    </a>
                    <div class="timeline">
                        <div id="emptyLoadingDiv" style="height:186px;">
                            <apex:image style="vertical-align:center;width:30px;height:30px;margin-left:450px;margin-top:70px;" value="{!URLFOR($Resource.LeanData__spinning)}"/>
                        </div>
                        <div id="timelineEntry" class="timeline-section timeline-start">
                            <div class="top-section">
                                <div style="position:absolute;bottom:0;width:70px;text-align:right;" class="med-grey-2">MARKETING</div>
                            </div>
                            <div class="mid-section" style="background:none;">
                            </div>
                            <div class="bottom-section">
                                <div style="position:absolute;width:70px;text-align:right;" class="med-grey-2">SALES</div>
                            </div>
                        </div>
                        <div id="invalidNotice">
                            <h2>There is no Buyer's Journey</h2>
                            <br/>
                            <h3></h3>
                        </div>  
                        <span class="clear"></span>
                    </div>
                    <div class="detail-table-div">
                        <table class="detail-table" ></table>
                        <a style="padding-top:10px;float:right;" class="ld-green" onClick="downloadCSV();" href="#">Download</a>
                    </div>
                    <span class="clear"></span>
                    <div class="toggle-mode-div">
                        <div onClick="toggleView();" class="view-toggle active-toggle">
                            TIMELINE
                        </div> 
                        <div onClick="toggleView();" class="view-toggle">
                            DETAILS
                        </div>         
                    </div>
                </div> <!-- Close timeline wrapper -->                    
            </apex:outputPanel>
        </div>
        <!-- Begin Tooltip -->
        <div id="infoModal" class="modal fade" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <!-- Modal content-->
                <div class="modal-content" style="display: inline-block;background: #eeefef;border-radius: 0px;">
                    <a data-dismiss="modal" style="position:absolute; float:right;top:5px;right:5px;" href="#">
                        <img style="width:15px;height:15px;" src="{!URLFOR($Resource.Reporting_Images, 'Close_Window_Icon.png')}"/>
                    </a>
                    <div class="dg_inner-wrapper" style="width:355px;">
                        <div class="dg_inner-wrapper-header" >
                            Legend
                        </div>
                        <div class="dg_inner-wrapper-content" >
                            <p><apex:image style="width:24px;height:24px;" value="{!URLFOR($Resource.LeanData__Reporting_Images, '1st_Icon.png')}" /> - First Touch </p>
                            <p><apex:image style="width:24px;height:24px;" value="{!URLFOR($Resource.LeanData__Reporting_Images, 'Opp_Created_Icon.png')}" /> - Opportunity Created Date</p>
                            <p><apex:image style="width:24px;height:24px;" value="{!URLFOR($Resource.LeanData__Reporting_Images, 'Closed_Won_Icon.png')}" /> - Opportunity Closed Date</p>
                            <p><apex:image style="width:24px;height:24px;" value="{!URLFOR($Resource.LeanData__Reporting_Images, 'Today_Icon.png')}" /> - Current Date</p>
                            <p><div style="float:left;height:20px;width:20px;background:#fcd79c;" /> <div class="float:left;">- Opportunity Stage Change</div></p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- End of Tooltip -->
    </div>
    
    <!-- jQuery Version 1.11.1 -->
    <apex:includeScript value="{!URLFOR($Resource.LeanData__bootstrap_v3_3_4, 'js/jquery.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.LeanData__JqueryUI, 'jquery-ui-1.11.4.custom/jquery-ui.min.js')}" />
    <!-- Bootstrap Core JavaScript -->
    <apex:includeScript value="{!URLFOR($Resource.LeanData__bootstrap_v3_3_4, 'js/bootstrap.js')}" />
    <!-- JavaScript -->
    <apex:includeScript value="{!URLFOR($Resource.LeanData__bootstrap_v3_3_4, 'js/bootstrap-multiselect.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.LeanData__DataTables, 'DataTables/1.10.4-jquery.dataTables.min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.LeanData__DataTables, 'DataTables/2.0.2-responsive.dataTables.min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.LeanData__DataTables, 'DataTables/2.17.0-moment.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.LeanData__DataTables, 'DataTables/1.10.12-sorting-datetime-moment.js')}"/>
    <apex:includeScript value="{!$Resource.LeanData__viewJSResource}"/>

    <c:googleAnalytics analyticsCategory="View" />

    <script>
        OPP_VIEW_COLUMNS = [
            {"label" : "Type", "name" : "eventType", "type" : "CUSTOM"},
            {"label" : "Target", "name" : "eventTargetName", "type" : "STRING"},
            {"label" : "Account", "name" : "eventAccountId", "type" : "REFERENCE"},
            {"label" : "Campaign", "name" : "eventCampaignId", "type" : "REFERENCE"},
            {"label" : "Attribution", "name" : "eventAttribution", "type" : "INTEGER"},
            {"label" : "Status", "name" : "eventStatus", "type" : "STRING"},
            {"label" : "Activity Date", "name" : "eventDate", "type" : "DATETIME"}
        ]
    </script>
    
    <script>
        Visualforce.remoting.timeout = 120000; // Set timeout at page level
        j$ = jQuery.noConflict();
        
        ga_event('Opportunity View');
        
        var oppViewMap;
        var firstTouch;
        var whoIds;
        var opportunityTimeline
        var timelineNumberOfBuckets;
        var frontEndEvents;
        var timelineWidth = 800; //Width of timeline is pixels in px
        var minSpacingWidth = 12; //Minimum space between dots for no overlap in px
        var dotWidth = 8; //Width of timeline points in px
        var timelineSectionMap;
        var timelineBucketSize;
        var timelineSectionWidth;
        var timelineDays;
        var stageOpacityIndexMap;
        var stageOpacityMap;
        
        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.Reporting_OpportunityViewController.getOppView}',
            '{!Opportunity.Id}',
            function(result, event) {
                if (event.status) {
                    oppViewMap = cleanNameSpace(result);
                    console.log( oppViewMap );
                    buildTimeline();
                } else {
                    console.log('Error with RemoteAction getOppView');
                }
            }
        );
        
        function cleanNameSpace(obj){
            if( isArray( obj ) ){
                for (var i=0; i < obj.length; i++) {
                  obj[i] = cleanNameSpace(obj[i]);
                }
            }
            else{
                //Iterate Fields in an Object replace
                for (var key in obj) {
                    if (Object.prototype.hasOwnProperty.call(obj, key)) {
                        //Remove namespace
                        var newKey = key;
                        newKey = newKey.replace('LeanData__','');
                        //console.log(newKey);
                        if( newKey != key ){
                            obj[newKey] = obj[key];
                            delete obj[key]; 
                        }
                        if( isObject( obj[newKey] ) || isArray( obj[newKey] ) ){
                            obj[newKey] = cleanNameSpace( obj[newKey]);
                        }
                    }
                }
            }
            return obj;
        }

        isObject = function(a) {
            return (!!a) && (a.constructor === Object);
        };

        isArray = function(a) {
            return (!!a) && (a.constructor === Array);
        };
        function buildTimeline() {
            frontEndEvents = [];
            if (getDate(oppViewMap.startDate) <= getDate(oppViewMap.endDate)) {
                j$('#emptyLoadingDiv').toggle();
                j$('#timelineEntry').toggle();
                j$('.toggle-mode-div').toggle();
                firstTouch = findFirstTouch(oppViewMap.relatedMarketingTouches, oppViewMap.relatedTasks, oppViewMap.relatedEvents);
                setUpOpportunityTimeline();
                createTimelinesections(oppViewMap.relatedMarketingTouches, oppViewMap.relatedTasks, oppViewMap.relatedEvents);
                setUpOppStageChanges();
                setFirstLastTouch();
                opportunityTimeline = getValuesFromMap(timelineSectionMap);
                opportunityTimeline.sort(timelineSectionSort);   
                for (i = 0; i < opportunityTimeline.length; i++){
                    opportunityTimeline[i].index = i;
                } 
                timelineNumberOfBuckets = opportunityTimeline.length;
                var tlContent = generateTimelineContent();
                j$('#timelineEntry').after(tlContent);
                loadMetrics();
            } else {
                var noticeMsg;
                if(oppViewMap.startDate == null || oppViewMap.endDate == null){
                    noticeMsg = 'Opportunity Date is invalid. Please ensure that Opportunity Created Date & Close Date are mapped to valid fields in <a target="_blank" href="/apex/dashboard#attribution/advanced_settings/custom_field_mappings">Custom Field Mappings Settings</a>.'
                } else {
                    noticeMsg = 'The Opportunity Close Date ' + moment.utc(oppViewMap.endDate).format("[(]MM[/]DD[/]YYYY[)]") + ' is earlier than the Opportunity Created Date ' + moment.utc(oppViewMap.startDate).format("[(]MM[/]DD[/]YYYY[).]");
                }
                j$('#invalidNotice h3').html(noticeMsg);
                j$('#emptyLoadingDiv').toggle();
                j$('#invalidNotice').toggle();
            }
        }
        
        function findFirstTouch(marketingTouches, tasks, events) {
            var firstTouch;
            for (var i = 0; i < marketingTouches.length; i++) {
                if (marketingTouches[i].Campaign_Member_Created_Date__c < oppViewMap.startDate) {
                    oppViewMap.startDate = marketingTouches[i].Campaign_Member_Created_Date__c;
                    firstTouch = new TimelineEvent(marketingTouches[i] , 'Marketing Touch', oppViewMap.leadsMap, oppViewMap.contactsMap);
                }
            }
            whoIds = new Set();
            for (var i = 0; i <tasks.length; i++) {
                whoIds.add(tasks[i].WhoId);
                if (tasks[i].CreatedDate < oppViewMap.startDate){
                    oppViewMap.startDate = tasks[i].CreatedDate;
                    firstTouch = new TimelineEvent(tasks[i], 'Task', oppViewMap.leadsMap, oppViewMap.contactsMap);
                }
            }
            for (var i = 0; i <events.length; i++) {
                whoIds.add(events[i].WhoId);
                if (events[i].StartDateTime < oppViewMap.startDate){
                    oppViewMap.startDate = events[i].StartDateTime;
                    firstTouch = new TimelineEvent(events[i], 'Event', oppViewMap.leadsMap, oppViewMap.contactsMap);
                } 
            }
            return firstTouch; 
        }
            
        function setUpOpportunityTimeline() {
            timelineDays = daysBetween(oppViewMap.startDate, oppViewMap.endDate) + 1;
            timelineDays = timelineDays <= 0 ? 1 : timelineDays;
            var temptimelineBucketSize =  timelineDays / (timelineWidth / (minSpacingWidth + dotWidth));
            timelineBucketSize = Math.ceil(temptimelineBucketSize);
            var actualSpacingWidth = timelineWidth / (timelineDays/timelineBucketSize) - dotWidth;
            timelineSectionWidth = Math.ceil(actualSpacingWidth + dotWidth);
            timelineSectionMap = {};

            var currentDate = oppViewMap.startDate;

            while (moment.utc(currentDate).isSameOrBefore(moment.utc(oppViewMap.endDate), 'day')){
                // timelineSectionMap[currentDate] = new TimelineSection(currentDate, currentDate + (timelineBucketSize - 1) * (1000*60*60*24));
                timelineSectionMap[currentDate] = new TimelineSection(currentDate, moment.utc(currentDate).add(timelineBucketSize - 1, 'days').valueOf());
                // currentDate = currentDate + (timelineBucketSize * (1000*60*60*24));
                currentDate = moment.utc(currentDate).add(timelineBucketSize, 'days').valueOf();
            }
        }
        
        function createTimelinesections(marketingTouches, tasks, events){
            for (i = 0; i < marketingTouches.length; i++){
                var KVPair = getRelatedTimeSectKVPair(marketingTouches[i].Campaign_Member_Created_Date__c);  
                tempSection = KVPair.value;  
                var newEvent = new TimelineEvent(marketingTouches[i], 'Marketing Touch', oppViewMap.leadsMap, oppViewMap.contactsMap);       
                tempSection.timelineEvents.push(newEvent);
                frontEndEvents.push(new FrontEndEvent(newEvent, oppViewMap.leadsMap, oppViewMap.contactsMap));
                tempSection.marketingEventTypes.add(marketingTouches[i].Campaign__r.Type || "&lt;null&gt;");
                tempSection.numberOfMarketingTouches++;
                timelineSectionMap[KVPair.key] = tempSection;
            }
            for (i = 0; i < tasks.length; i++){
                var KVPair = getRelatedTimeSectKVPair(tasks[i].CreatedDate);
                tempSection = KVPair.value;
                var newEvent = new TimelineEvent(tasks[i], 'Task', oppViewMap.leadsMap, oppViewMap.contactsMap);
                tempSection.timelineEvents.push(newEvent);
                frontEndEvents.push(new FrontEndEvent(newEvent, oppViewMap.leadsMap, oppViewMap.contactsMap));
                if (tasks[i].Type != undefined) {
                    tempSection.salesEventTypes.add(tasks[i].Type);  
                }
                tempSection.numberOfSalesTouches++;
                timelineSectionMap[KVPair.key] = tempSection;
            }
            for (i = 0; i < events.length; i++){
                var KVPair = getRelatedTimeSectKVPair(events[i].StartDateTime);
                tempSection = KVPair.value;
                var newEvent = new TimelineEvent(events[i], 'Event', oppViewMap.leadsMap, oppViewMap.contactsMap);
                tempSection.timelineEvents.push(newEvent);
                frontEndEvents.push(new FrontEndEvent(newEvent, oppViewMap.leadsMap, oppViewMap.contactsMap));
                if (events[i].Type != undefined) {
                    tempSection.salesEventTypes.add(events[i].Type);    
                }
                tempSection.numberOfSalesTouches++;
                timelineSectionMap[KVPair.key] = tempSection;
            }
        }
        
        function getRelatedTimeSectKVPair(eventDate){
            var dateDifference = daysBetween(oppViewMap.startDate, eventDate);
            var bucketIndex = Math.floor(dateDifference / timelineBucketSize);
            // var KVPair = {'key': oppViewMap.startDate + (bucketIndex * timelineBucketSize * (1000*60*60*24))};
            var KVPair = {'key': moment.utc(oppViewMap.startDate).add(bucketIndex * timelineBucketSize, 'days').valueOf()};
            if (timelineSectionMap[KVPair.key] != null) {
                KVPair.value = timelineSectionMap[KVPair.key];
                return KVPair;
            } else {
                console.log('cannot find related timeline section');
                console.log(eventDate);
                console.log(bucketIndex);
                console.log(timelineBucketSize);
                console.log(KVPair.key);
                KVPair.value = new TimelineSection(eventDate, eventDate);
                return KVPair;
            }
        }
        
        function setUpOppStageChanges() {
            var lastStage = 'Before Opp Creation';
            var totalChangeSections = 1;
            stageOpacityIndexMap = {};
            stageOpacityIndexMap['Before Opp Creation'] = 1;
            var oppHistoryList = oppViewMap.oppHist;
            
            for (i = 0; i < oppHistoryList.length; i++) {
                if (lastStage === null) {
                    lastStage = oppHistoryList[i].StageName;
                }
                if (oppHistoryList[i].StageName != lastStage ){
                    lastStage = oppHistoryList[i].StageName;
                    var KVPair = getRelatedTimeSectKVPair(getDate(oppHistoryList[i].CreatedDate));
                    var tempSection = KVPair.value;
                    
                    tempSection.timelineEvents.push(new TimelineEvent(new StageChangeEvent(lastStage, oppHistoryList[i].StageName, oppHistoryList[i].CreatedDate), 'Stage Change', oppViewMap.leadsMap, oppViewMap.contactsMap));
                    
                    if (tempSection.hasStageChange === false){
                        totalChangeSections++;
                    }
                    
                    if (!stageOpacityIndexMap.hasOwnProperty(oppHistoryList[i].StageName)) {
                        stageOpacityIndexMap[oppHistoryList[i].StageName] = totalChangeSections;
                    }
                    
                    tempSection.oppStageName = oppHistoryList[i].StageName;
                    tempSection.hasStageChange = true;
                    timelineSectionMap[KVPair.key] = tempSection;
                }
            }
            
            stageOpacityMap = {};
            var stageIndexKeys = Object.keys(stageOpacityIndexMap);
            for (var i = 0; i < stageIndexKeys.length; i++) {
                if (totalChangeSections != 1) {
                    stageOpacityMap[stageIndexKeys[i]] = .2 + .8*(((stageOpacityIndexMap[stageIndexKeys[i]]) * 1.0) / ((totalChangeSections - 1) * 1.0));
                } else {
                    stageOpacityMap[stageIndexKeys[i]] = 1;
                }
            }
    
            var currentStage = 'Before Opp Creation';
            
            var tempSections = getValuesFromMap(timelineSectionMap);
            tempSections.sort(timelineSectionSort);
            for (var i = 0; i < tempSections.length; i++){
                if (tempSections[i].hasStageChange) {
                    currentStage = tempSections[i].oppStageName;
                } else {
                    var KVPair = getRelatedTimeSectKVPair(getDate(tempSections[i].startDate));
                    var tempSection = KVPair.value;
                    tempSection.oppStageName = currentStage;
                    timelineSectionMap[KVPair.key] = tempSection;
                }
            }
        }
        
        function setFirstLastTouch() {
            var createKVPair = getRelatedTimeSectKVPair(getDate(oppViewMap.selectedOpportunity[oppViewMap.reporting_context.OPPORTUNITY_CREATED_DATE_FIELD]));
            var oppCreateSection = createKVPair.value;
            oppCreateSection.isOppCreate = true;
            oppCreateSection.hasStageChange = false;
            timelineSectionMap[createKVPair.key] = oppCreateSection;
            
            // Includes might not work for older browsers
            if (oppViewMap.reporting_context.CLOSED_WON_STAGES.includes(oppViewMap.selectedOpportunity.StageName)){
                var closeKVPair = getRelatedTimeSectKVPair(oppViewMap.endDate);
                var oppCloseSection = closeKVPair.value;
                oppCloseSection.isOppClose = true;
                timelineSectionMap[closeKVPair.key] = oppCloseSection;
            } else if (oppViewMap.reporting_context.CLOSED_LOST_STAGES.includes(oppViewMap.selectedOpportunity.StageName)) {
                var closeKVPair = getRelatedTimeSectKVPair(oppViewMap.selectedOpportunity[oppViewMap.reporting_context.OPPORTUNITY_CLOSEDATE_FIELD]);
                var oppCloseSection = closeKVPair.value;
                oppCloseSection.isOppCloseLost = true;
                timelineSectionMap[closeKVPair.key] = oppCloseSection;
            } else {
                var currentKVPair = getRelatedTimeSectKVPair(moment.utc(oppViewMap.endDate).valueOf());
                var currentDateSection = currentKVPair.value;
                currentDateSection.isToday = true;
                timelineSectionMap[currentKVPair.key] = currentDateSection;
            }
            if (firstTouch != null){
                var firstKVPair = getRelatedTimeSectKVPair(getDate(firstTouch.eventDate));
                var firstTouchSection = firstKVPair.value;
                firstTouchSection.isFirstTouch = true;
                timelineSectionMap[firstKVPair.key] = firstTouchSection;
            }
        }
        
        function daysBetween(startDate, endDate) {
            var date1 = moment.utc(getDate(startDate));
            var date2 = moment.utc(getDate(endDate));
            var difference = date2.diff(date1, 'days');
            return difference;
        }
        
        // Strips down dateTime to date
        function getDate(dateTime) {
            var dateObject = new Date(dateTime);
            var hoursInMilli = dateObject.getUTCHours() * 60 * 60 * 1000;
            var minutesInMilli = dateObject.getUTCMinutes() * 60 * 1000;
            var secondsInMilli = dateObject.getUTCSeconds() * 1000;
            var milliseconds = dateObject.getUTCMilliseconds();
            return (dateTime -(hoursInMilli + minutesInMilli + secondsInMilli + milliseconds));
        }
        
        // Mapping through keys to get all values in a given hashmap
        function getValuesFromMap(hashmap) {
            var mapKeys = Object.keys(hashmap);
            return mapKeys.map(function(key) {return hashmap[key]});
        }
        
        function TimelineSection(startDate, endDate) {
            this.startDate = startDate;
            this.endDate = endDate;  
            this.numberOfDays = daysBetween(startDate, endDate) + 1;
            this.timelineEvents = [];
            this.salesEventTypes = new Set();
            this.marketingEventTypes = new Set();
            this.numberOfSalesTouches = 0;
            this.numberOfMarketingTouches = 0;
            this.isFirstTouch = false;
            this.isOppCreate = false;
            this.hasStageChange = false;
            this.isOppClose = false;
            this.isOppCloseLost = false;
            this.isToday = false;
        }
        
        // In place of compareTo for TimelineSection
        function timelineSectionSort(sectionA, sectionB) {
            return sectionA.startDate - sectionB.startDate;
        }
        
        function TimelineEvent(event, eventType, leadsMap, contactsMap) {
            if (eventType === 'Marketing Touch') {
                this.marketingTouch = event;
                this.eventDate = event.Campaign_Member_Created_Date__c;
                this.eventType = 'Marketing Touch';
                this.activityType = event.Campaign__r.Type;
                if(event.Contact__c != null){
                    this.eventTargetName = event.Contact__r.Name;
                } else if(event.Lead__c != null ){
                    this.eventTargetName = event.Lead__r.Name;
                }
            } else if (eventType === 'Task') {
                this.salesTask = event;
                this.eventDate = event.CreatedDate;
                this.eventType = 'Task';
                this.activityType = event.Type;
                if (event.WhoId != null){    
                    if (contactsMap[event.WhoId] != null){                    
                        tempContact = contactsMap[event.WhoId];
                        this.eventTargetName = tempContact.Name;
                    }    
                    else if (leadsMap[event.WhoId] != null){
                        tempLead = leadsMap[event.WhoId];
                        this.eventTargetName = tempLead.Name;
                    }
                }
                else if (event.WhatId != null){
                    this.eventTargetName = event.What.Name;
                }           
            } else if (eventType === 'Event') {
                this.salesEvent = event;
                this.eventDate = event.StartDateTime ;
                this.eventType = 'Event';
                this.activityType = event.Type;
                if (event.WhoId != null){
                    if (contactsMap[event.WhoId] != null){
                        tempContact = contactsMap[event.WhoId];
                        this.eventTargetName = tempContact.Name;
                    }    
                    else if (leadsMap[event.WhoId] != null){
                        tempLead = leadsMap[event.WhoId];
                        this.eventTargetName = tempLead.Name;
                    }
                }
                else if (event.WhatId != null ){
                    this.eventTargetName = event.What.Name;
                } 
            } else if (eventType === 'Stage Change') {
                this.stageChangeEvent = event;
                this.eventDate = event.eventDate ;
                this.eventType = 'Stage Change';
                this.activityType = 'Stage Change to ' + event.newStage;
            }
        }
        
        // In place of compareTo for TimelineEvent
        function timelineEventSort(eventA, eventB) {
            return eventA.eventDate - eventB.eventDate;
        }
        
        function StageChangeEvent(oldStage, newStage, eventDate) {
            this.oldStage = oldStage;
            this.newStage = newStage;
            this.eventDate = eventDate;
        }

        function FrontEndEvent(event, leadsMap, contactsMap) {
            this.eventType = event.eventType;
            this.eventDate = (new Date(event.eventDate)).toString();
            this.eventStatus = '-';

            //NEW STUFF
            this.eventCampaign = {};
            this.eventAccount = {};
            this.eventAccountId = '';
            this.eventCampaignId = '';

            if (this.eventType == 'Marketing Touch') {
                if (event.marketingTouch.Contact__c != null) {
                    this.eventTargetName = event.marketingTouch.Contact__r.Name;
                    this.eventTargetId = event.marketingTouch.Contact__c;
                } else if (event.marketingTouch.Lead__c != null) {
                    this.eventTargetName = event.marketingTouch.Lead__r.Name;
                    this.eventTargetId = event.marketingTouch.Lead__c;
                }
                this.eventAccountId = event.marketingTouch.Account__c;
                this.eventAccount['Name'] = event.marketingTouch.Account__r.Name;
                this.eventCampaignId = event.marketingTouch.Campaign__c;
                this.eventCampaign['Name'] = event.marketingTouch.Campaign__r.Name;
                this.eventStatus = event.marketingTouch.Campaign_Member_Status__c;
                this.eventAttribution = event.marketingTouch.Weighted_MT_Attribution_Amount__c;
            } else if (this.eventType == 'Task') {
                this.eventStatus = event.salesTask.Status;
                if (event.salesTask.WhoId != null) {
                    if (oppViewMap.contactsMap[event.salesTask.WhoId] != null) {
                        var tempContact = oppViewMap.contactsMap[event.salesTask.WhoId];
                        this.eventTargetName = tempContact.Name;
                        this.eventTargetId = tempContact.Id;
                        this.eventAccountId = tempContact.AccountId;
                        this.eventAccount["Name"] = tempContact.Account.Name;
                    } else if (oppViewMap.leadsMap[event.salesTask.WhoId] != null) {
                        var tempLead = oppViewMap.leadsMap[event.salesTask.WhoId];
                        this.eventTargetName = tempLead.Name;
                        this.eventTargetId = tempLead.Id;
                        this.eventAccountId = tempLead.Reporting_Matched_Account__c;
                        this.eventAccount["Name"] = tempLead.Reporting_Matched_Account__r.Name;
                    }
                } else if (event.salesTask.WhatId != null) {
                    this.eventTargetName = event.salesTask.What.Name;
                    this.eventTargetId = event.salesTask.WhatId;
                    this.eventAccountId = event.salesTask.WhatId;
                    this.eventAccount["Name"] = event.salesTask.What.Name;
                }
                
            } else if (this.eventType == 'Event') {
                if (event.salesEvent.WhoId != null) {
                    if (oppViewMap.contactsMap[event.salesEvent.WhoId] != null) {
                        var tempContact = oppViewMap.contactsMap[event.salesEvent.WhoId];
                        this.eventTargetName = tempContact.Name;
                        this.eventTargetId = tempContact.Id;
                        // this.eventAccountName = tempContact.AccountId;
                        // this.eventAccountId = tempContact.Account.Name;
                        this.eventAccountId = tempContact.AccountId;
                        this.eventAccount["Name"] = tempContact.Account.Name;
                    } else if (oppViewMap.leadsMap[event.salesEvent.WhoId] != null) {
                        var tempLead = oppViewMap.leadsMap[event.salesEvent.WhoId];
                        this.eventTargetName = tempLead.Name;
                        this.eventTargetId = tempLead.Id;
                        // this.eventAccountName = tempLead.Reporting_Matched_Account__c;
                        // this.eventAccountId = tempLead.Reporting_Matched_Account__r.Name;
                        this.eventAccountId = tempLead.Reporting_Matched_Account__c;
                        this.eventAccount["Name"] = tempLead.Reporting_Matched_Account__r.Name;
                    }
                } else if (event.salesTask !== undefined && event.salesTask.WhatId != null) {
                    this.eventTargetName = event.salesEvent.What.Name;
                    this.eventTargetId = event.salesEvent.WhatId;
                    // this.eventAccountName = event.salesEvent.What.Name;
                    // this.eventAccountId = event.salesEvent.WhatId;
                    this.eventAccountId = event.salesEvent.WhatId;
                    this.eventAccount["Name"] = event.salesEvent.What.Name;
                }
            }
        }
        
        function loadMetrics() {
            var metrics = '';
            metrics += '<div><b>Total Days:</b>' + timelineDays + '</div>';
            metrics += '<div><b>Marketing Touches:</b>' + oppViewMap.relatedMarketingTouches.length + '</div>';
            metrics += '<div><b>Sales Touches:</b>' + (oppViewMap.relatedTasks.length + oppViewMap.relatedEvents.length) + '</div>';
            j$('.header-metrics').append(metrics);
        }
        
        function generateTimelineContent() {
            var content = '';
            for (var i = 0; i < opportunityTimeline.length; i++) {
                var timeSect = opportunityTimeline[i];
                var section = '';
                section += '<div class="timeline-section" style="width:' + timelineSectionWidth + 'px;">';

                // Start of top-section
                section += '<div class="top-section" style="width:' + timelineSectionWidth + 'px;">';
                if (timeSect.numberOfMarketingTouches > 0) {
                    section += '<div class="marketing-info';
                    if (timeSect.isOppCreate || timeSect.isFirstTouch) {
                        section += ' special-event-marketing-info';
                    }
                    section += '">';
                    section += '<div style="width:190px;position:absolute;white-space: nowrap; overflow:hidden;text-overflow: ellipsis;" >';
                    section += '<span class="semi-bold">' + '[' + [...timeSect.marketingEventTypes] + ']' + ' |</span>' + ' ' + timeSect.numberOfMarketingTouches + ' touch';
                    if (timeSect.numberOfMarketingTouches > 1) {
                        section += 'es';
                    }
                    section += '</div></div>';
                    section += '<div class="marketing-pointer"><img style="height:24px;width:8px;" src="' + '{!URLFOR($Resource.Reporting_Images, "Circle_Point_Icon_Top.png")}' + '" /></div>'
                }
                section += '</div>'

                // Start of mid-section
                section += '<div class="mid-section ';
                if (timeSect.hasStageChange && !timeSect.isOppClose) {
                    section += 'stage-change-section';
                }
                section += '" style="background: \'#1abc9c\';color:';
                if (stageOpacityMap[timeSect.oppStageName] > 0.5) {
                    section += 'white';
                } else {
                    section += '#555555';
                }
                section += ';width:' + timelineSectionWidth + 'px;';
                section += 'font-size:9px;background:rgba(129,211,169,' + stageOpacityMap[timeSect.oppStageName] + ');">';
                if (timeSect.isFirstTouch) {
                    section += '<img style="width:24px;height:24px;left:-2px;top:-6px;position:absolute;z-index: 1101;" ';
                    section += 'src="' + '{!URLFOR($Resource.Reporting_Images, "1st_Icon.png")}' + '" />';
                }
                if (timeSect.isOppCreate) {
                    section += '<img style="width:24px;height:24px;left:-2px;top:-5px;position:absolute;" ';
                    section += 'src="' + '{!URLFOR($Resource.Reporting_Images, "Opp_Created_Icon.png")}' + '" />';
                }
                if (timeSect.isOppClose) {
                    section += '<img style="width:24px;height:24px;left:-2px;top:-5px;position:absolute;z-index: 1101;" ';
                    section += 'src="' + '{!URLFOR($Resource.Reporting_Images, "Closed_Won_Icon.png")}' + '" />';
                }
                if (timeSect.isOppCloseLost) {
                    section += '<img style="width:24px;height:24px;left:-2px;top:-5px;position:absolute;z-index: 1101;" ';
                    section += 'src="' + '{!URLFOR($Resource.Reporting_Images, "Frowny_Icon.png")}' + '" />';    
                }
                if (timeSect.isToday) {
                    section += '<img style="width:24px;height:24px;left:-2px;top:-6px;position:absolute;z-index: 1101;" ';
                    section += 'src="' + '{!URLFOR($Resource.Reporting_Images, "Today_Icon.png")}' + '" />';
                }
                
                section += '<img class="selected-tool-tip-icon ';
                if (timeSect.isFirstTouch || timeSect.isOppCreate || timeSect.isOppClose || timeSect.isToday) {
                    section += 'hidden-tool-tip-icon';
                }
                section += '" style="z-index:1100;width:24px;height:24px;left:1px;top:-5px;position:absolute;" src="' + '{!URLFOR($Resource.Reporting_Images, "List_Icon.png")}' + '" />  ';
                section += '<div class="section-tool-tip';
                if (timelineNumberOfBuckets / 2 < timeSect.index) {
                    section += ' second-half-timeline';
                }
                section += '" style="cursor:default;top:10px;width:300px;left:10px;color:var(--dk-grey-2);z-index:1000;background:white;position:absolute;padding:15px;border:1px solid var(--lt-grey-2);border-radius:3px;">';

                var monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
                var startDate = new Date(timeSect.startDate);
                var endDate = new Date(timeSect.endDate); 
                section += '<div class="tool-tip-header"><span>' + monthNames[startDate.getUTCMonth()] + ' ' + startDate.getUTCDate() + ' - ';
                section += monthNames[endDate.getUTCMonth()] + ' ' + endDate.getUTCDate() + ', ' + endDate.getUTCFullYear() + ' |' + timeSect.oppStageName + '</span></div>';
                section += generateTimelineEvents(timeSect.timelineEvents) + '</div></div>';

                //Start of bottom-section
                section += '<div class="bottom-section" style="width:' + timelineSectionWidth + 'px;">';
                if (timeSect.numberOfSalesTouches > 0) {
                    section += '<div class="sales-pointer">' + '<img style="height:24px;width:8px;" src="' + '{!URLFOR($Resource.Reporting_Images, "Circle_Point_Icon.png")}' + '" /></div>';
                    section += '<div class="sales-info" style="right:' + (timelineSectionWidth - 30) + 'px;">'; 
                    section += '<div style="width:200px;text-align:right;white-space: nowrap; overflow:hidden;text-overflow: ellipsis;" >';
                    section += '<span class="semi-bold">';
                    if (timeSect.salesEventTypes.size != 0) {
                        section += '[' + [...timeSect.salesEventTypes] + ']' + ' |';    
                    }
                    section += '</span>' + timeSect.numberOfSalesTouches + ' touch';
                    if (timeSect.numberOfSalesTouches > 1) {
                        section += 'es';
                    }
                    section += '</div></div>';
                }
                section += '</div></div>';

                content += section; 
            }
            return content;
        }
        
        function generateTimelineEvents(tlEvents) {
            var eventsHTML = '';    
            for (var j = 0; j < tlEvents.length; j++) {
                var tlEvent = tlEvents[j];
                eventsHTML += '<div class="tool-tip-body" style="font-size:8pt;margin-top:7px;">';
                eventsHTML += '<div style="height:12px;white-space: nowrap; overflow:hidden;text-overflow: ellipsis; width:270px;">';
                eventsHTML += '<img style="width:10px;height:10px;" src="' + '{!URLFOR($Resource.Reporting_Images, 'Green_Arrow_Icon.png')}' + '" /> &nbsp; ';
                if (tlEvent.eventType == 'Task' || tlEvent.eventType == 'Event') {
                    eventsHTML += '<span style="font-weight:normal;">' + tlEvent.eventType;
                }
                if (tlEvent.activityType != undefined) {
                    if (tlEvent.eventType == 'Task' || tlEvent.eventType == 'Event') {
                        eventsHTML += '/';
                    }
                    eventsHTML += tlEvent.activityType;
                }
                eventsHTML += '</span> - ';
                var eventDate = new Date(tlEvent.eventDate);
                var month = ('0' + (eventDate.getUTCMonth() + 1)).slice(-2);
                eventsHTML += '<span>' + month + '/' + eventDate.getUTCDate() + '</span>';
                if (tlEvent.eventType == 'Marketing Touch') {
                    eventsHTML += '<span style="font-weight:normal;">' + ' ' + tlEvent.marketingTouch.Campaign__r.Name + '</span>';
                }
                if (tlEvent.eventType != 'Stage Change' && tlEvent.eventTargetName != undefined) {
                    eventsHTML += '/' + tlEvent.eventTargetName; 
                }
                eventsHTML += '</div></div>';
            }
            return eventsHTML;
        }

        // Table form of Opp view
        var datatablesInit = false;
        function setTable(){
            datatablesInit = true;

            var tableParent = j$('.detail-table')[0]; //getPageBlockBody("campaign_history_pb");
            tableParent.appendChild(table = generateTableAndHeader(tableParent, OPP_VIEW_COLUMNS, ''));

            var tasksArr = oppViewMap.relatedTasks;
            var eventsArr = oppViewMap.relatedEvents;
            var marketingTouchesArr = oppViewMap.relatedMarketingTouches;
     
            table.appendChild(tbody = document.createElement("tbody"));
            var displayColumns = OPP_VIEW_COLUMNS;

            for (var i=0;i<frontEndEvents.length;i++) {
                var obj = frontEndEvents[i];
                tbody.appendChild(row = generateTableRow());

                if (obj["eventType"] == "Task"){
                    var task = tasksArr.splice(0,1);
                    obj["link"] = task[0]["Id"];
                } 
                else if (obj["eventType"] == "Event"){
                    var event = eventsArr.splice(0,1);
                    obj["link"] = event[0]["Id"];  
                }
                else if (obj["eventType"] == "Marketing Touch"){
                    var mt = marketingTouchesArr.splice(0,1);
                    obj["link"] = mt[0]["Campaign_Member_Id__c"];
                }
                
                for (var j = 0; j < displayColumns.length; j++) {
                    var cell = generateDataTablesCell(row, false);
                    cell.innerHTML = getHTMLForValue(obj, displayColumns[j]);
                    if (cell.innerHTML == '') {
                        cell.innerHTML = '-';
                    }
                    
                    var limit = 30;
                    
                    if (cell.innerHTML[0] != '<') {
                        if (cell.innerHTML.length > limit){
                            cell.innerHTML = shortenString(cell.innerHTML, limit)
                        }
                    } 
                    
                    else {
                        var a = j$(cell.innerHTML);

                        if (a[0].innerHTML.length > limit){
                            a.html(shortenString(a[0].innerHTML, limit));
                            cell.innerHTML = a[0].outerHTML;
                        }
                    }
                    
                }
            }
            initializeDataTable(j$(table), 'opp-view',{"pageLength": 8});
        }

        function shortenString(text, limit){
            return text.substring(0, limit) + "...";            
        }

        function toggleView() {
            j$(".timeline").toggle();
            j$(".detail-table-div").toggle();

            if (!datatablesInit) {
                setTable();
            } 
            j$(".view-toggle").toggleClass("active-toggle");
            
        }

        function downloadCSV( ){
            console.log( frontEndEvents );
            var filename = 'Opportunity_Timeline_Export.csv';
            var csvFile = 'Touch Type,Target,Account,Campaign,Attribution,Status,Activity Date\r\n';
            for (var i = 0; i < frontEndEvents.length; i++) {
                
                var line = '\"' + frontEndEvents[i].eventType + '\",' + frontEndEvents[i].eventTargetName + ',\"' + frontEndEvents[i]['eventAccount'].Name + '\",\"' + ( frontEndEvents[i].eventType == 'Marketing Touch' ? frontEndEvents[i]['eventCampaign'].Name : '' ) + '\",\"' + ( frontEndEvents[i].eventType == 'Marketing Touch' ? frontEndEvents[i].eventAttribution : '' ) + '\",\"' + frontEndEvents[i].eventStatus + '\",' + frontEndEvents[i].eventDate;                  
                csvFile += line + '\r\n';
            }

            csvFile = csvFile.replace(/null/g, '');
            var a = document.createElement('a');
            a.href     = 'data:attachment/csv;charset=utf-8,\ufeff' + escape(csvFile);
            a.target   ='_blank';
            a.download = filename;
            a.innerHTML = "Click me to download the file.";
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
        }         
    </script>

</apex:page>